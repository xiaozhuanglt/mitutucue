<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1" metadata-complete="true">
    <display-name>hello mitutu</display-name>
    <!--配置编码方式-->
    <!--过滤器-->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <!--指定过滤器应用的URL-->
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 配置springmvc的前端控制器 指向spring-mvc.xml 程序在启动的时候就加载springmvc 可以接受所有请求 load-on-startup：表示启动容器时初始化该Servlet； -->
        <servlet>
            <servlet-name>springServlet</servlet-name>
            <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
            <!-- 可以自定义servlet.xml配置文件的位置和名称， 默认为WEB-INF目录下，名称为[<servlet-name>]-servlet.xml，如spring-servlet.xml -->
            <init-param>
                <param-name>contextConfigLocation</param-name>
                <param-value> classpath:configuration/applicationContext.xml</param-value>
            </init-param>
            <load-on-startup>1</load-on-startup>
        </servlet>
    <!-- 将前端URL请求和后台处理方法controller建立对应关系-->
        <servlet-mapping>
            <servlet-name>springServlet</servlet-name>
            <url-pattern>/</url-pattern>
        </servlet-mapping>

    <!--filter在被某格式的url请求触发时（被触发的url格式在web.xml中的filter-mapping部分配置）才会再次响应filter类;
    listener是时刻处于监听状态，并不需要被某格式的url触发，所以不用进行类似于filter-mapping部分的配置-->
    <!-- Spring配置 -->
        <listener>
            <listener-class>
                org.springframework.web.context.ContextLoaderListener
            </listener-class>
        </listener>


    <!-- log4j2-begin -->
    <context-param>
        <param-name>log4jConfiguration</param-name>
        <param-value>classpath:configuration/log4j2.xml</param-value>
    </context-param>
  <!--  <listener>
        <listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>
    </listener>
    <filter>
        <filter-name>log4jServletFilter</filter-name>
        <filter-class>org.apache.logging.log4j.web.Log4jServletFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>log4jServletFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
        <dispatcher>INCLUDE</dispatcher>
        <dispatcher>ERROR</dispatcher>
    </filter-mapping>-->
    <!-- log4j2-end -->


    <!-- 取消对某一类文件的拦截-->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>*.md</url-pattern>
    </servlet-mapping>
    <!--
        <servlet-mapping>
            <servlet-name>default</servlet-name>
            <url-pattern>*.css</url-pattern>
            </servlet-mapping>
            <servlet-mapping>
            <servlet-name>default</servlet-name>
            <url-pattern>*.js</url-pattern>
        </servlet-mapping>
    -->

    <!--
        在启动Web项目时，容器(比如Tomcat)会读web.xml配置文件中的两个节点<listener>和<contex-param>。
        接着容器会创建一个ServletContext(上下文),应用范围内即整个WEB项目都能使用这个上下文。
        接着容器会将读取到<context-param>转化为键值对,并交给ServletContext。
        容器创建<listener></listener>中的类实例,即创建监听（备注：listener定义的类可以是自定义的类但必须需要继承ServletContextListener）。
        在监听的类中会有一个contextInitialized(ServletContextEvent event)初始化方法，在这个方法中可以通过event.getServletContext().getInitParameter("contextConfigLocation") 来得到context-param 设定的值。在这个类中还必须有一个contextDestroyed(ServletContextEvent event) 销毁方法.用于关闭应用前释放资源，比如说数据库连接的关闭。
        得到这个context-param的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的Servlet都要早。
    -->
      <context-param>
          <param-name>contextConfigLocation</param-name>
          <param-value> classpath:configuration/applicationContext.xml</param-value>
      </context-param>

    <!-- 欢迎页面-->
    <welcome-file-list>
        <welcome-file>helloworld.html</welcome-file>
    </welcome-file-list>
    <!--404错误展示页面，可自行配置-->
    <!--<error-page>-->
    <!--<error-code>404</error-code>-->
    <!--<location>/WEB-INF/views/404.jsp</location>-->
    <!--</error-page>-->
    <!--设置session失效时间为30分钟 -->
    <session-config>
        <session-timeout>600</session-timeout>
    </session-config>

</web-app>